#!/usr/bin/env ruby

require 'eventmachine'
require 'httparty'
require 'digest'
require 'json'
require 'cgi'
require 'base64'

require './lib/torrent/transmission'

def mkchunks(io, chunk_size)
  chunks = ""

  while (chunk = io.read(chunk_size))
    chunks += Digest::SHA1.digest(chunk)
  end

  chunks
end

def magnetize(name, info_hash, tracker="http://localhost:8888/announce")
  "magnet:?xt=urn:btih:#{info_hash}&dn=#{CGI.escape(name)}"
end

def infodict(name, io)
  chunk_size = 256 * 1024
  chunks = mkchunks(io, chunk_size)

  {
    "name" => name,
    "length" => io.size,
    "piece length" => chunk_size,
    "pieces" => chunks
  }
end

class Service
  include HTTParty
  headers 'Content-Type' => "application/json"
  base_uri "http://localhost:4567"
  format :json
end

def publish(file)
  io = File.open(file, 'rb')
  info = infodict(file, io)
  info_hash = Digest::SHA1.hexdigest info.bencode
  info["pieces"] = Base64::encode64(info["pieces"])
  Service.post("/files", :body => info.to_json)
end

@trans = Transmission.new("config/transmission")
def download(magnets)
  magnets.each do |magnet|
    puts "adding #{magnet.inspect} to download list"
    response = @trans.add magnet
    puts "added #{response}"
  end
end

def poll_for_updates
  puts "-- polling for changes"

  resp = Service.get("/files", :query => {:client_id => Process.pid})
  download(JSON.parse(resp.body))
end

module DeliveryServer
  def post_init
    puts "-- client connected"
  end

  def receive_data(data)
    path = data

    # Yes, yes, publishing blocks. We're not trying for perf for now.
    # TODO: Use a non-blocking http client.
    publish(path.strip)

    close_connection
  end

  def unbind
    puts "-- client disconnected"
  end
end

EM.run do
  timer = EM::PeriodicTimer.new(5) { poll_for_updates }

  EM.start_server "127.0.0.1", 1225, DeliveryServer
end
