#!/usr/bin/env ruby

require 'eventmachine'
require 'httparty'
require 'digest'
require 'json'

require './lib/torrent/transmission'

def make_hash_and_chunks(io, chunk_size)
  # Mmmmmhmmm... Hash and chunks: Just like mama used to make!
  puts "hashing"

  sha256 = Digest::SHA256.new
  chunks = []

  while (chunk = io.read(chunk_size))
    sha256 << chunk
    chunks << Digest::SHA1.hexdigest(chunk)
  end

  results = [sha256.hexdigest, chunks]
  puts results.inspect

  results
end

def metainfo(name, io)
  chunk_size = 256 * 1024
  sha256, chunks = make_hash_and_chunks(io, chunk_size)

  {
    "info" => {
      "name" => name,
      "length" => io.size,
      "piece length" => chunk_size,
      "pieces" => chunks
    },
    "meta" => {
      "sha256" => sha256
    }
  }
end

class Service
  include HTTParty
  headers 'Content-Type' => "application/json"
  base_uri "http://localhost:4567"
  format :json
end

def publish(file)
  io = File.open(file, 'rb')
  meta = metainfo(file, io)
  Service.post("/files", :body => meta.to_json)
end

@trans = Transmission.new("config/transmission")
def download(magnets)
  magnets.each do |magnet|
    puts "adding #{magnet.inspect} to download list"
    response = @trans.add magnet
    puts "added #{response}"
  end
end

def poll_for_updates
  puts "-- polling for changes"

  resp = Service.get("/files", :query => {:client_id => Process.pid})
  download(JSON.load(resp.body))
end

module DeliveryServer
  def post_init
    puts "-- client connected"
  end

  def receive_data(data)
    path = data

    # Yes, yes, publishing blocks. We're not trying for perf for now.
    # TODO: Use a non-blocking http client.
    publish(path.strip)

    close_connection
  end

  def unbind
    puts "-- client disconnected"
  end
end

EM.run do
  timer = EM::PeriodicTimer.new(5) { poll_for_updates }

  EM.start_server "127.0.0.1", 1225, DeliveryServer
end
